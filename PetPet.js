function X(e){window.enmity.plugins.registerPlugin(e)}const g=window.enmity.modules.common.Constants;window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets,window.enmity.modules.common.Messages,window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars;const _=window.enmity.modules.common.Native,n=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher;const S=window.enmity.modules.common.Storage,D=window.enmity.modules.common.Toasts,L=window.enmity.modules.common.Dialog;window.enmity.modules.common.Token;const R=window.enmity.modules.common.REST;window.enmity.modules.common.Settings,window.enmity.modules.common.Users,window.enmity.modules.common.Navigation,window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking;const T=window.enmity.modules.common.StyleSheet;window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes;const{components:o}=window.enmity;o.Alert,o.Button,o.FlatList;const Q=o.Image;o.ImageBackground,o.KeyboardAvoidingView,o.Modal,o.Pressable,o.RefreshControl;const Z=o.ScrollView;o.SectionList,o.StatusBar,o.StyleSheet,o.Switch;const h=o.Text;o.TextInput,o.TouchableHighlight;const b=o.TouchableOpacity;o.TouchableWithoutFeedback,o.Touchable;const p=o.View;o.VirtualizedList,o.Form,o.FormArrow,o.FormCTA,o.FormCTAButton,o.FormCardSection,o.FormCheckbox;const B=o.FormDivider;o.FormHint,o.FormIcon,o.FormInput,o.FormLabel,o.FormRadio;const l=o.FormRow,N=o.FormSection;o.FormSelect,o.FormSubLabel;const O=o.FormSwitch;o.FormTernaryCheckBox,o.FormText,o.FormTextColors,o.FormTextSizes;const E={byProps:(...e)=>window.enmity.modules.filters.byProps(...e),byName:(e,t)=>window.enmity.modules.filters.byName(e,t),byTypeName:(e,t)=>window.enmity.modules.filters.byTypeName(e,t),byDisplayName:(e,t)=>window.enmity.modules.filters.byDisplayName(e,t)};function V(...e){return window.enmity.modules.bulk(...e)}function G(...e){return window.enmity.modules.getByProps(...e)}window.enmity.modules.common;const z=e=>{let t=0;for(let i in e)t++;return t};function a(e){return window.enmity.assets.getIDByName(e)}const u={Debug:a("debug"),Retry:a("ic_message_retry"),Failed:a("Small"),Cancel:a("ic_megaphone_nsfw_16px"),Add:a("add_white"),Delete:a("ic_message_delete"),Clear:a("ic_clear_all_24px"),Pencil:a("ic_pencil_24px"),Success:a("ic_selection_checked_24px"),Warning:a("ic_warning_24px"),Copy:a("toast_copy_link"),Open:a("ic_leave_stage"),Clipboard:a("pending-alert"),Initial:a("coffee"),Shield:a("ic_person_shield"),Debug_Command:{Sent:a("ic_application_command_24px"),Clock:a("clock")},Settings:{Toasts:{Context:a("toast_image_saved"),Settings:a("ic_selection_checked_24px")},Self:a("friends_toast_icon"),Share:a("share"),Robot:a("ic_robot_24px"),Commands:a("ic_profile_badge_bot_commands"),Debug:a("ic_rulebook_16px")}},U=e=>{D.open({content:`Copied ${e} to clipboard.`,source:u.Clipboard})},ee=e=>{let t=e.split(`
`).map(i=>{if(i!="")return`"${i.replaceAll(":",'":"').replace(" ","")}",`});return t[0]=`{${t[0]}`,t[z(t)]=`${t[z(t)]}}`,t=t.join(""),t=t.replaceAll("undefined",""),t=t.split("").reverse().join("").replace(",","").split("").reverse().join(""),t};async function te(){try{let e=await S.getItem("device_list");if(e)return JSON.parse(e);let t=(await R.get("https://gist.githubusercontent.com/adamawolf/3048717/raw/1ee7e1a93dff9416f6ff34dd36b0ffbad9b956e9/Apple_mobile_device_types.txt")).text,i=ee(t);await S.setItem("device_list",i);let s=await S.getItem("device_list");return JSON.parse(s)}catch(e){console.warn(`[SpinsPlugins Local Error \u2014 Issue when getting devices: ${e}]`);return}}async function ne(e,t,i){let s=await te();return`**[${e}] Debug Information**
> **Plugin Version:** ${t}
> **Plugin Build:** ${i.split("-")[1]}
> **Discord Build:** ${_.InfoDictionaryManager.Version} (${_.InfoDictionaryManager.Build})
> **Software Version:** ${_.DCDDeviceManager.systemVersion}
> **Device:** ${s[_.DCDDeviceManager.device]}`}const{native:v}=window.enmity;function oe(){v.reload()}v.version,v.build,v.device,v.version;const ie=G("transitionToGuild");async function se({manifest:e}){const t=`${e.sourceUrl}?${Math.floor(Math.random()*1001)}.js`,i=await(await R.get(t)).text;let s=i.match(/\d\.\d\.\d+/g),r=i.match(/patch\-\d\.\d\.\d+/g);return!s||!r?Y(e.name,e.version):(s=s[0],r=r[0],s!=e.version?q(t,s,r.split("-")[1],e,!1):r!=e.build?q(t,s,r.split("-")[1],e,!0):Y(e.name,e.version))}const q=(e,t,i,s,r)=>{const d=r?i:t;L.show({title:"Update found",body:`A newer ${r?"build":"version"} is available for ${s.name}. ${r?`
The version will remain at ${t}, but the build will update to ${i}.`:""}
Would you like to install ${r?`build \`${i}\``:`version \`${t}\``}  now?`,confirmText:"Update",cancelText:"Not now",onConfirm:()=>re(e,d,s,r)})},Y=(e,t)=>{console.log(`[${e}] Plugin is on the latest version, which is ${t}`),D.open({content:`${e} is on latest version (${t})`,source:u.Success})};async function re(e,t,i,s){window.enmity.plugins.installPlugin(e,({data:r})=>{r=="installed_plugin"||r=="overridden_plugin"?L.show({title:`Updated ${i.name}`,body:`Successfully updated to ${s?"build":"version"} \`${t}\`. 
Would you like to reload Discord now?`,confirmText:"Yep!",cancelText:"Not now",onConfirm:()=>{oe()}}):L.show({title:"Error",body:`Something went wrong while updating ${i.name}.`,confirmText:"Report this issue",cancelText:"Cancel",onConfirm:()=>{ie.openURL(`https://github.com/spinfal/enmity-plugins/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5BBUG%5D%20${i.name}%20Update%20Error%3A%20${s?`b${t}`:`v${t}`}`)}})})}const x=window.enmity.modules.common.Components.General.Animated,[$,ae]=V(E.byProps("transitionToGuild"),E.byProps("setString")),c=T.createThemedStyleSheet({container:{paddingTop:30,paddingLeft:20,marginBottom:-5,flexDirection:"row"},text_container:{paddingLeft:15,paddingTop:5,flexDirection:"column",flexWrap:"wrap"},image:{width:75,height:75,borderRadius:10},main_text:{opacity:.975,letterSpacing:.25,fontFamily:g.Fonts.DISPLAY_NORMAL},header:{color:g.ThemeColorMap.HEADER_PRIMARY,fontFamily:g.Fonts.DISPLAY_BOLD,fontSize:25,letterSpacing:.25},sub_header:{color:g.ThemeColorMap.HEADER_SECONDARY,opacity:.975,fontSize:12.75}});var le=({manifest:e})=>{const t=n.useRef(new x.Value(1)).current,i=()=>{x.spring(t,{toValue:1.1,duration:250,useNativeDriver:!0}).start()},s=()=>{x.spring(t,{toValue:1,duration:250,useNativeDriver:!0}).start()},r=()=>{$.openURL("https://spin.rip/")},d={transform:[{scale:t}]};return n.createElement(n.Fragment,null,n.createElement(p,{style:c.container},n.createElement(b,{onPress:r,onPressIn:i,onPressOut:s},n.createElement(x.View,{style:[d]},n.createElement(Q,{style:[c.image],source:{uri:"https://cdn.spin.rip/r/l9uevwe4ia0.jpg"}}))),n.createElement(p,{style:c.text_container},n.createElement(b,{onPress:()=>{$.openURL(e.sourceUrl)}},n.createElement(h,{style:[c.main_text,c.header]},e.name," ")),n.createElement(p,{style:{flexDirection:"row"}},n.createElement(h,{style:[c.main_text,c.sub_header]},"A plugin by"),n.createElement(b,{onPress:()=>{$.openURL("https://spin.rip/")}},n.createElement(h,{style:[c.main_text,c.sub_header,{paddingLeft:4,fontFamily:g.Fonts.DISPLAY_BOLD}]},e.authors[0].name))),n.createElement(p,{style:{flexDirection:"row"}},n.createElement(h,{style:[c.main_text,c.sub_header]},"Settings page by"),n.createElement(b,{onPress:()=>{$.openURL("https://github.com/acquitelol/")}},n.createElement(h,{style:[c.main_text,c.sub_header,{paddingLeft:4,fontFamily:g.Fonts.DISPLAY_BOLD}]},"Rosie<3"))),n.createElement(p,null,n.createElement(b,{style:{flexDirection:"row"},onPress:()=>{ae.setString(`**${e.name}** v${e.version}`),U("plugin name and version")}},n.createElement(h,{style:[c.main_text,c.sub_header]},"Version:"),n.createElement(h,{style:[c.main_text,c.sub_header,{paddingLeft:4,fontFamily:g.Fonts.DISPLAY_BOLD}]},e.version," "))))))};const[ce,j]=V(E.byProps("transitionToGuild","openURL"),E.byProps("setString","getString")),f=T.createThemedStyleSheet({bottom_padding:{paddingBottom:25},icon:{color:g.ThemeColorMap.INTERACTIVE_NORMAL},item:{color:g.ThemeColorMap.TEXT_MUTED},text_container:{display:"flex",flexDirection:"column"}});var me=({manifest:e,settings:t,hasToasts:i,children:s,commands:r})=>n.createElement(Z,null,n.createElement(le,{manifest:e}),s,r&&n.createElement(N,{title:"Plugin Commands"},r.map(d=>n.createElement(l,{label:`/${d.name}`,subLabel:d.description,leading:n.createElement(l.Icon,{style:f.icon,source:u.Settings.Commands}),trailing:l.Arrow,onPress:function(){j.setString(`/${d.name}`),U(`the command ${d.name}`)}}))),n.createElement(N,{title:"Utility"},i&&n.createElement(n.Fragment,null,n.createElement(l,{label:"Initialization Toasts",leading:n.createElement(l.Icon,{style:f.icon,source:u.Settings.Toasts.Context}),subLabel:`If available, show toasts when ${e.name} is starting`,trailing:n.createElement(O,{value:t.getBoolean(`${e.name}-toastEnable`,!1),onValueChange:()=>{t.toggle(`${e.name}-toastEnable`,!1),D.open({content:`Successfully ${t.getBoolean(`${e.name}-toastEnable`,!1)?"enabled":"disabled"} initialization toasts.`,source:u.Success})}})}),n.createElement(B,null)),n.createElement(l,{label:"Copy Debug Info",subLabel:`Copy useful debug information of ${e.name} to clipboard.`,leading:n.createElement(l.Icon,{style:f.icon,source:u.Settings.Debug}),trailing:l.Arrow,onPress:async function(){j.setString(await ne(e.name,e.version,e.build)),U("plugin debug information")}}),n.createElement(B,null),n.createElement(l,{label:"Clear Device List Cache",subLabel:"Remove the fetched device list storage. This will not clear Discord's or your iDevice's cache.",leading:n.createElement(l.Icon,{style:f.icon,source:u.Delete}),trailing:l.Arrow,onPress:async function(){await S.removeItem("device_list"),D.open({content:"Cleared device list storage.",source:u.Success})}})),n.createElement(N,{title:"Source"},n.createElement(l,{label:"Check for Updates",subLabel:`Check for any plugin updates for ${e.name}.`,leading:n.createElement(l.Icon,{style:f.icon,source:u.Copy}),trailing:l.Arrow,onPress:()=>{se({manifest:e})}}),n.createElement(B,null),n.createElement(l,{label:"Source",subLabel:`View ${e.name} source code`,leading:n.createElement(l.Icon,{style:f.icon,source:u.Open}),trailing:l.Arrow,onPress:()=>{ce.openURL(`https://github.com/spinfal/enmity-plugins/tree/master/${e.name}`)}})),n.createElement(l,{style:f.bottom_padding,label:`Plugin Version: ${e.version}
Plugin Build: ${e.build.split("-").pop()}`})),de="PetPet",ue="1.0.6",ge="patch-1.0.15",we="Generate a petpet gif from a given image",he=[{name:"spin",id:"308440976723148800"}],fe="#ff0069",ye="https://raw.githubusercontent.com/spinfal/enmity-plugins/master/dist/PetPet.js",H={name:de,version:ue,build:ge,description:we,authors:he,color:fe,sourceUrl:ye};function P(e,t,i,s){window.enmity.clyde.sendReply(e,t,i,s)}var W;(function(e){e[e.BuiltIn=0]="BuiltIn",e[e.Guild=1]="Guild",e[e.DM=2]="DM"})(W||(W={}));var C;(function(e){e[e.Chat=1]="Chat",e[e.User=2]="User",e[e.Message=3]="Message"})(C||(C={}));var M;(function(e){e[e.BuiltIn=0]="BuiltIn",e[e.BuiltInText=1]="BuiltInText",e[e.BuiltInIntegration=2]="BuiltInIntegration",e[e.Bot=3]="Bot",e[e.Placeholder=4]="Placeholder"})(M||(M={}));var A;(function(e){e[e.Role=1]="Role",e[e.User=2]="User"})(A||(A={}));var y;(function(e){e[e.SubCommand=1]="SubCommand",e[e.SubCommandGroup=2]="SubCommandGroup",e[e.String=3]="String",e[e.Integer=4]="Integer",e[e.Boolean=5]="Boolean",e[e.User=6]="User",e[e.Channel=7]="Channel",e[e.Role=8]="Role",e[e.Mentionnable=9]="Mentionnable",e[e.Number=10]="Number",e[e.Attachment=11]="Attachment"})(y||(y={}));var J;(function(e){e[e.ApplicationCommand=2]="ApplicationCommand",e[e.MessageComponent=3]="MessageComponent"})(J||(J={}));const be={id:"petpet-command",name:"petpet",displayName:"petpet",description:"Generate a petpet gif from a given image",displayDescription:"Generate a petpet gif from a given image",type:C.Chat,inputType:M.BuiltInText,options:[{name:"url",displayName:"url",description:"The URL of the image to petpet",displayDescription:"The URL of the image to petpet",type:y.String,required:!1},{name:"user",displayName:"user",description:"Grab a user's avatar to petpet",displayDescription:"Grab a user's avatar to petpet",type:y.User,required:!1},{name:"size",displayName:"size",description:"Change the size of the petpet gif. Max is 512. Defaults to 100, higher values equal larger files and potentially no Discord embeds",displayDescription:"Change the size of the petpet gif. Max is 512. Defaults to 100, higher values equal larger files and potentially no Discord embeds",type:y.Integer,required:!1},{name:"delay",displayName:"delay",description:"The delay between each frame, defaults to 20",displayDescription:"The delay between each frame, defaults to 20",type:y.Integer,required:!1},{name:"whisper",displayName:"whisper",description:"Only you can see the result",displayDescription:"Only you can see the result",type:y.Boolean,required:!1}],execute:async function(e,t){const i=e[e.findIndex(m=>m.name==="url")],s=e[e.findIndex(m=>m.name==="user")],r=e[e.findIndex(m=>m.name==="size")],d=e[e.findIndex(m=>m.name==="delay")],I=e[e.findIndex(m=>m.name==="whisper")];if(!i&&!s)return P(t?.channel.id??"0","No argument provided, nothing will happen. Here's a banana instead \u{1F34C}");try{const m=i?.value?i.value:G("getUser").getUser(s?.value).getAvatarURL().split("?")[0].replace(/gif|webp/,"png"),k={method:"GET",uri:"https://memeado.vercel.app/api/petpet",qs:{image:m},json:!0},w=await R.get(k.uri,k).then(F=>F.body);if(w.status==!0){const F={type:"rich",image:{proxy_url:w?.result,url:w?.result,width:r?r.value:100,height:r?r.value:100},footer:{text:`Files are purged every 24 hours \u2022 Powered by ${w?.github}`},color:"0xff0069"};if(I?.value??!0){P(t?.channel.id??"0",{embeds:[F]});return}else return{content:w?.result}}else console.log("[ PetPet Fetch Response ]",w,w?.status),console.log("[ PetPet Arguments ]",i,s,r,d,I),P(t?.channel.id??"0","Something went wrong, please try again later. Fetch response and PetPet arguments sent to console.")}catch(m){console.log("[ PetPet Error ]",m),console.log("[ PetPet Arguments ]",i,s,r,d,I),P(t?.channel.id??"0","An error occurred while fetching and preparing the petpet image. Check debug logs for more info.")}}},K=[be],pe={...H,onStart(){this.commands=K},onStop(){this.commands=[]},patches:[],getSettingsPanel({settings:e}){return n.createElement(me,{manifest:H,settings:e,hasToasts:!1,commands:K})}};X(pe);
